{"version":3,"sources":["context/TeamContext.tsx","hooks/teamHooks.ts","components/crossIcon/CrossIcon.tsx","components/Modal/Modal.tsx","components/Scorebutton/ScoreButton.tsx","components/EditPen/EditPen.tsx","components/Category/Category.tsx","components/Board/Board.tsx","components/MenuButton/MenuButton.tsx","components/GameInfo/GameInfo.tsx","components/Header/Header.tsx","components/LeaderBoard/LeaderBoardRow.tsx","AddTeamModal/AddTeamModal.tsx","components/LeaderBoard/LeaderBoard.tsx","App.tsx","index.tsx"],"names":["TeamContext","createContext","undefined","TeamsContextProvider","props","children","useState","context","teams","setTeams","Provider","value","useAllTeam","useContext","CrossIcon","viewBox","className","x1","y1","x2","y2","stroke","strokeWidth","Modal","title","hidden","onDialogToggle","strict","classNameForModal","modalRoot","document","getElementById","Error","ReactDOM","createPortal","classNames","backdrop","onClick","ScoreButton","winnerTeam","setWinnerTeam","isDisabled","setIsDisabled","isModalOpen","setIsModalOpen","errorMessage","setErrorMessage","isOnlyWrongAnswers","setIsOnlyWrongAnswers","score","categoryName","classNamesForScoreButton","disabled","htmlFor","name","id","onChange","e","target","map","team","index","type","teamToGetPoints","find","indexOf","teamsArray","EditPen","xmlns","width","height","fill","d","Category","setCategoryName","editing","setEditing","Board","MenuButton","GameInfo","currentGameInfo","setCurrentGameInfo","gameInfoToShow","gameInfo","game","parseInt","href","googleDocLink","rel","spotifyLink","author","Header","isChangeGameModalOpen","setIsChangeGameModalOpen","LeaderBoardRow","placement","teamName","AddTeamModal","setTeamName","onSubmit","preventDefault","TextField","label","variant","size","fullWidth","required","error","inputProps","style","fontSize","InputLabelProps","LeaderBoard","length","sort","a","b","App","render","StrictMode"],"mappings":"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","file":"static/js/main.8714279c.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport interface TeamContextType {\n  teams: Team[];\n  setTeams: (teams: Team[]) => void;\n}\n\nexport const TeamContext = createContext<TeamContextType>(\n  undefined as unknown as TeamContextType\n);\n\ninterface Team {\n  name: string;\n  score: number;\n}\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport function TeamsContextProvider(props: Props) {\n  const { children } = props;\n  const [teams, setTeams] = useState<Team[]>([]);\n\n  const context: TeamContextType = {\n    teams,\n    setTeams,\n  };\n\n  return (\n    <TeamContext.Provider value={context}>{children}</TeamContext.Provider>\n  );\n}\n","import { useContext } from \"react\";\nimport { TeamContext } from \"../context/TeamContext\";\n\nexport function useAllTeam() {\n  return useContext(TeamContext);\n}\n","import React from \"react\";\n\nimport \"./CrossIcon.scss\";\n\nexport function CrossIcon() {\n  return (\n    <svg viewBox=\"0 0 10 10\" className=\"cross-icon\">\n      <line\n        x1=\"0\"\n        y1=\"10\"\n        x2=\"10\"\n        y2=\"0\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n      />\n      <line\n        x1=\"0\"\n        y1=\"0\"\n        x2=\"10\"\n        y2=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// @ts-ignore\nimport CoreDialog from \"@nrk/core-dialog/jsx\";\n\nimport \"./Modal.scss\";\nimport { CrossIcon } from \"../crossIcon/CrossIcon\";\nimport classNames from \"classnames\";\n\ninterface Props {\n  title: string;\n  hidden: boolean;\n  onDialogToggle: () => void;\n  children: React.ReactNode;\n  strict?: boolean;\n  classNameForModal?: string;\n}\n\nexport function Modal(props: Props) {\n  const {\n    title,\n    hidden,\n    onDialogToggle,\n    children,\n    strict = false,\n    classNameForModal,\n  } = props;\n\n  const modalRoot = document.getElementById(\"modal-root\");\n\n  if (!modalRoot) {\n    throw Error(\"Could not find he DOM element to render modal in.\");\n  }\n\n  return ReactDOM.createPortal(\n    <div className={classNames(\"modal\", classNameForModal)}>\n      <CoreDialog\n        className=\"modal__content\"\n        hidden={hidden}\n        strict={strict}\n        backdrop={true}\n        onDialogToggle={onDialogToggle}\n      >\n        <h3 className=\"modal__title\">{title}</h3>\n        {children}\n        <button\n          onClick={onDialogToggle}\n          className=\"modal__close-button remove-button-style\"\n        >\n          <CrossIcon />\n        </button>\n      </CoreDialog>\n    </div>,\n    modalRoot\n  );\n}\n","import React, { useState } from \"react\";\n\nimport \"./ScoreButton.scss\";\nimport { useAllTeam } from \"../../hooks/teamHooks\";\nimport { Modal } from \"../Modal/Modal\";\nimport classNames from \"classnames\";\n\ninterface Props {\n  score: number;\n  categoryName: string;\n}\n\nexport function ScoreButton(props: Props) {\n  const [winnerTeam, setWinnerTeam] = useState<string>();\n  const [isDisabled, setIsDisabled] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [isOnlyWrongAnswers, setIsOnlyWrongAnswers] = useState(false);\n  const { score, categoryName } = props;\n\n  const { teams, setTeams } = useAllTeam();\n\n  const classNamesForScoreButton = classNames({\n    \"score-button\": true,\n    \"score-button__disabled\": isDisabled,\n    \"score-button__not-disabled\": !isDisabled,\n  });\n\n  return (\n    <>\n      <button\n        className={classNamesForScoreButton}\n        onClick={() => {\n          setIsDisabled(true);\n          setIsModalOpen(true);\n        }}\n        disabled={isDisabled}\n      >\n        {score}\n      </button>\n      {isModalOpen && (\n        <Modal\n          title={`${categoryName} ${score} poeng`}\n          hidden={false}\n          onDialogToggle={() => {\n            setIsModalOpen(!isModalOpen);\n            setIsDisabled(false); // Players can make a mistake and pick wrong category or score amount.\n          }}\n        >\n          <div className=\"select-component\">\n            <label htmlFor=\"teams\">Velg laget som gjettet korrekt:</label>\n            <select\n              className=\"select-component-input\"\n              name=\"teams\"\n              id=\"teams\"\n              onChange={(e) => {\n                setErrorMessage(\"\");\n                setWinnerTeam(e.target.value);\n              }}\n            >\n              <option value={undefined} />\n              {teams.map((team, index) => (\n                <option value={team.name} key={index}>\n                  {team.name}\n                </option>\n              ))}\n            </select>\n            {errorMessage && <span className=\"error\">{errorMessage}</span>}\n\n            <div className=\"checkbox-component\">\n              <input\n                type={\"checkbox\"}\n                id=\"noAnswers\"\n                name=\"noAnswers\"\n                // value={isOnlyWrongAnswers}\n                onChange={() => setIsOnlyWrongAnswers(!isOnlyWrongAnswers)}\n              />\n              <label className={\"checkbox-component-label\"} htmlFor=\"noAnswers\">\n                Ingen gjettet riktig.\n              </label>\n            </div>\n          </div>\n          <button\n            type=\"button\"\n            className=\"add-points-button\"\n            onClick={addScore}\n          >\n            Legg til poeng\n          </button>\n        </Modal>\n      )}\n    </>\n  );\n\n  function addScore() {\n    if (isOnlyWrongAnswers) {\n      setIsModalOpen(false);\n      return;\n    }\n\n    if (winnerTeam === undefined) {\n      setErrorMessage(\"Påkrevd felt.\");\n      return;\n    }\n\n    const teamToGetPoints = teams.find((team) => team.name === winnerTeam);\n\n    if (!teamToGetPoints) {\n      setErrorMessage(\"Laget finnes ikke..\");\n      return;\n    }\n\n    const index = teams.indexOf(teamToGetPoints);\n\n    // Changing the object of the team to update score before adding the new object to teams array\n    const teamsArray = [...teams];\n    teamsArray[index] = {\n      ...teamToGetPoints,\n      score: teamToGetPoints.score + score,\n    };\n    setTeams(teamsArray);\n\n    setIsModalOpen(false);\n  }\n}\n","import React from \"react\";\n\nimport \"./EditPen.scss\";\n\nexport function EditPen() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"edit-pen\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path d=\"m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001zm-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708l-1.585-1.585z\" />\n    </svg>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ScoreButton } from \"../Scorebutton/ScoreButton\";\n\nimport \"./Category.scss\";\nimport { EditPen } from \"../EditPen/EditPen\";\n\ninterface Props {\n  name: string;\n}\n\nexport function Category(props: Props) {\n  const { name } = props;\n\n  const [categoryName, setCategoryName] = useState(name);\n  const [editing, setEditing] = useState(false);\n\n  return (\n    <div className=\"category\">\n      <div className=\"category__name\">\n        {editing ? (\n          <input\n            value={categoryName}\n            onChange={(e) => setCategoryName(e.target.value)}\n            className=\"category__name-input\"\n          />\n        ) : (\n          <h2>{categoryName}</h2>\n        )}\n        <button\n          onClick={() => setEditing(!editing)}\n          className=\"remove-button-style\"\n        >\n          <EditPen />\n        </button>\n      </div>\n      <ScoreButton score={100} categoryName={categoryName} />\n      <ScoreButton score={200} categoryName={categoryName} />\n      <ScoreButton score={300} categoryName={categoryName} />\n      <ScoreButton score={400} categoryName={categoryName} />\n      <ScoreButton score={500} categoryName={categoryName} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Category } from \"../Category/Category\";\n\nimport \"./Board.scss\";\n\nexport function Board() {\n  return (\n    <section className=\"board\">\n      <div className=\"board__categories\">\n        <Category name={\"Sted\"} />\n        <Category name={\"Tall\"} />\n        <Category name={\"Mat og drikke\"} />\n        <Category name={\"Tid\"} />\n      </div>\n    </section>\n  );\n}\n","import React from \"react\";\nimport \"./MenuButton.scss\";\n\ninterface Props {\n  title: string;\n  onClick: () => void;\n  className?: string;\n}\n\nexport function MenuButton(props: Props) {\n  const { title, onClick, className } = props;\n\n  return (\n    <button className={`remove-button-style menu-button ${className}`} onClick={onClick}>\n      {title}\n    </button>\n  );\n}\n","import React, { useState } from \"react\";\nimport gameInfo from \"../../json/gameInfo.json\";\n\nimport \"./GameInfo.scss\";\n\ninterface GameInfoType {\n  id: number;\n  name: string;\n  googleDocLink: string;\n  spotifyLink: string;\n  author: string;\n}\n\nexport function GameInfo() {\n  const [currentGameInfo, setCurrentGameInfo] = useState<number>();\n\n  const gameInfoToShow: GameInfoType | undefined = gameInfo.find(\n    (game) => game.id === currentGameInfo\n  );\n\n  return (\n    <div className=\"game-info\">\n      <label htmlFor=\"teams\">Velg spill</label>\n      <select\n        className=\"select-component-input\"\n        name=\"teams\"\n        id=\"teams\"\n        onChange={(e) => setCurrentGameInfo(parseInt(e.target.value))}\n      >\n        <option value={undefined} />\n        {gameInfo.map((game, index) => (\n          <option value={game.id} key={index}>\n            {game.name}\n          </option>\n        ))}\n      </select>\n\n      {gameInfoToShow && (\n        <div className=\"game-info__links\">\n          <span>\n            <b>NB! Kategoriene må endres manuelt.</b>\n          </span>\n          <span>Navn: {gameInfoToShow.name}</span>\n          <span>\n            Google doc link:{\" \"}\n            <a\n              href={gameInfoToShow.googleDocLink}\n              target={\"_blank\"}\n              rel=\"noreferrer\"\n            >\n              Fasit (Google docs)\n            </a>\n          </span>\n          <span>\n            Spotify link:{\" \"}\n            <a\n              href={gameInfoToShow.spotifyLink}\n              target={\"_blank\"}\n              rel=\"noreferrer\"\n            >\n              Sanger (Spotify)\n            </a>\n          </span>\n          <span>Creator: {gameInfoToShow.author}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport \"./Header.scss\";\nimport { Modal } from \"../Modal/Modal\";\nimport { MenuButton } from \"../MenuButton/MenuButton\";\nimport { GameInfo } from \"../GameInfo/GameInfo\";\n\nexport function Header() {\n  const [isChangeGameModalOpen, setIsChangeGameModalOpen] = useState(false);\n\n  return (\n    <header className=\"header\">\n      <div className=\"header__buttons\">\n        <MenuButton\n          title={\"Velg spill\"}\n          onClick={() => setIsChangeGameModalOpen(true)}\n        />\n      </div>\n\n      {isChangeGameModalOpen && (\n        <Modal\n          title={\"Endre spill\"}\n          hidden={false}\n          onDialogToggle={() =>\n            setIsChangeGameModalOpen(!isChangeGameModalOpen)\n          }\n        >\n          <GameInfo />\n        </Modal>\n      )}\n    </header>\n  );\n}\n","import React from \"react\";\n\nimport \"./LeaderBoardRow.scss\";\n\ninterface Props {\n  placement: number;\n  teamName: string;\n  score: number;\n}\n\nexport function LeaderBoardRow(props: Props) {\n  const { placement, teamName, score } = props;\n  return (\n    <tr className=\"leader-board-row\">\n      <td>{placement}</td>\n      <td>{teamName}</td>\n      <td>{score}</td>\n    </tr>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Modal } from \"../components/Modal/Modal\";\nimport { useAllTeam } from \"../hooks/teamHooks\";\nimport { TextField } from \"@material-ui/core\";\n\nimport \"./AddTeamModal.scss\";\n\ninterface Props {\n  setIsModalOpen: (b: boolean) => void;\n  isModalOpen: boolean;\n}\n\nexport function AddTeamModal(props: Props) {\n  const { setIsModalOpen, isModalOpen } = props;\n  const { teams, setTeams } = useAllTeam();\n  const [teamName, setTeamName] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  return (\n    <Modal\n      title={\"Legg til nytt lag\"}\n      hidden={false}\n      onDialogToggle={() => setIsModalOpen(!isModalOpen)}\n    >\n      <form className=\"add-team-modal\" onSubmit={(e) => e.preventDefault()}>\n        <TextField\n          label=\"Lagnavn\"\n          variant=\"standard\"\n          size={\"medium\"}\n          fullWidth\n          required\n          error={errorMessage !== \"\"}\n          inputProps={{ style: { fontSize: 20 } }} // font size of input text\n          InputLabelProps={{ style: { fontSize: 15 } }} // font size of input label\n          onChange={(e) => {\n            setTeamName(e.target.value);\n            setErrorMessage(\"\");\n          }}\n        />\n      </form>\n      <button\n        className=\"remove-button-style add-team-modal__complete-button\"\n        onClick={onCompleteClick}\n      >\n        Fullfør\n      </button>\n    </Modal>\n  );\n\n  function onCompleteClick() {\n    if (teamName === \"\") {\n      setErrorMessage(\"Lagnavn kan ikke være tomt.\");\n      return;\n    }\n    setTeams([...teams, { name: teamName, score: 0 }]);\n    setIsModalOpen(false);\n  }\n}\n","import React, { useState } from \"react\";\nimport { useAllTeam } from \"../../hooks/teamHooks\";\n\nimport \"./LeaderBoard.scss\";\nimport { LeaderBoardRow } from \"./LeaderBoardRow\";\nimport { AddTeamModal } from \"../../AddTeamModal/AddTeamModal\";\n\nexport function LeaderBoard() {\n  const { teams } = useAllTeam();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  return (\n    <div className=\"leader-board\">\n      {teams.length > 0 && (\n        <table className=\"leader-board__table\">\n          <thead>\n            <tr className=\"leader-board__table-headings\">\n              <th>Plassering</th>\n              <th>Lagnavn</th>\n              <th>Poeng</th>\n            </tr>\n          </thead>\n          <tbody>\n            {teams\n              .sort((a, b) => b.score - a.score)\n              .map((team, index) => (\n                <LeaderBoardRow\n                  placement={index + 1}\n                  teamName={team.name}\n                  score={team.score}\n                  key={index}\n                />\n              ))}\n          </tbody>\n        </table>\n      )}\n\n      <button\n        className=\"remove-button-style leader-board__button\"\n        onClick={() => setIsModalOpen(!isModalOpen)}\n      >\n        Legg til nytt lag\n      </button>\n\n      {isModalOpen && (\n        <AddTeamModal\n          setIsModalOpen={setIsModalOpen}\n          isModalOpen={isModalOpen}\n        />\n      ) }\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.scss\";\nimport \"./utilities/utilities.scss\";\nimport { Board } from \"./components/Board/Board\";\nimport { Header } from \"./components/Header/Header\";\nimport { LeaderBoard } from \"./components/LeaderBoard/LeaderBoard\";\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Board />\n      <LeaderBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { TeamsContextProvider } from \"./context/TeamContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TeamsContextProvider>\n      <App />\n    </TeamsContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}